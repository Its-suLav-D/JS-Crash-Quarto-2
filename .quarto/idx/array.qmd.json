{"title":"Arrays","markdown":{"headingText":"Arrays","containsRefs":false,"markdown":"In JavaScript, an array is an ordered collection of data items, which can be of any data type. Arrays are a very useful data structure in programming, and they are used to store and manage large amounts of data efficiently.\n\n## Creating Arrays \n\nThere are bunch of ways to create an array in javascript. Below are some of the examples to acheive it. \n\n```{.js}\nconst arr = [10] \nThe Array constructor is a function that creates and initializes an array object. It is used to create an array with a specified length, or to create an array from an array-like object or iterable.\nconst arr = Array(341) // Create empty Array [ <341 empty items> ]\nconst arr = Array(341, 2) // Creates Array of length 2 [341, 2]\nconst arr = new Array(341)\nconst arr = ['CSE'] \nconst arr = Array('CSE') // Creats Array of length 1 ['CSE']\nconst arr = new Array('CSE', 'Love') // Creeats Array of length 2 ['CSE', 'Love']\n```\n\nArray.of() is a static method that creates a new Array instance with a variable number of arguments, regardless of the number of arguments or their type.\n\nThe Array.of() method is similar to the Array constructor, but it creates an array with the given arguments as its elements, rather than creating an empty array with a specified length.\n\n```{.js}\nconst arr = Array.of(341) // Creates Array of Length 1 [ 341 ]\nconst arr = Array.of('CSE', 341) // Creates Array of Length 2 ['CSE', 341]\n```\n\nArray.from() is a static method that creates a new, shallow-copied Array instance from an array-like or iterable object. It takes an iterable object, like an array, or a string, and returns a new Array object with the elements of the iterable.\n\nHere is an example of using Array.from() to create an array from a string:\n\n```{.js}\nconst arr = Array.from('CSE 341')\nconsole.log(arr) // ['C','S', 'E', ' ', '3', '4', '1']\n```\n\n## Methods available for working with arrays  \n\n1. Push() \n\npush() is a method that adds one or more elements to the end of an array and returns the new length of the array.\n\nHere is an example of using push() to add an element to an array:\n\n```{.js}\nconst arr = [1, 2, 3];\narr.push(4);\nconsole.log(arr); // [1, 2, 3, 4]\n```\n\n2. Pop() \n\npop() is a method that removes the last element from an array and returns the removed element.\n\nHere is an example of using pop() to remove the last element from an array:\n\n```{.js}\nconst arr = [1, 2, 3];\nconst last = arr.pop();\nconsole.log(last); // 3\nconsole.log(arr); // [1, 2]\n```\n\n3. Shift() \n\nshift() is a method that removes the first element from an array and returns the removed element.\n\nHere is an example of using shift() to remove the first element from an array:\n\n```{.js}\nconst arr = [1, 2, 3];\nconst first = arr.shift();\nconsole.log(first); // 1\nconsole.log(arr); // [2, 3]\n```\n\n4. unShift() \n\nunshift() is a method that adds one or more elements to the beginning of an array and returns the new length of the array.\n\nHere is an example of using unshift() to add an element to the beginning of an array:\n\n```{.js}\nconst arr = [1, 2, 3];\narr.unshift(0);\nconsole.log(arr); // [0, 1, 2, 3]\n```\n\nsplice() is a method that adds, removes, or replaces elements in an array. It takes three arguments: the index at which to start making changes, the number of elements to remove (if any), and the elements to add (if any). It returns an array containing the removed elements.\n\nHere are some of the examples to remove, add, and copy  \n```{.js}\n// Remove an element from an array\nconst arr = [1, 2, 3, 4, 5];\nconst removed = arr.splice(2, 1);\nconsole.log(removed); // [3]\nconsole.log(arr); // [1, 2, 4, 5]\n// Add an element \nconst arr = [1, 2, 3, 4, 5];\narr.splice(2, 0, 3.5);\nconsole.log(arr); // [1, 2, 3.5, 3, 4, 5]\n// Create a shallow copy. It takes two arguments, the start index and the end index(exclusive)\nconst arr = [1, 2, 3, 4, 5];\nconst copy = arr.slice();\nconsole.log(copy); // [1, 2, 3, 4, 5]\n// Create a subarray from the middle of the array\nconst subarray = arr.slice(1, 4);\nconsole.log(subarray); // [2, 3, 4]\n// Create a subarray from the end of the array\nconst subarray2 = arr.slice(-2);\nconsole.log(subarray2); // [4, 5]\n// Create a subarray from the beginning of the array\nconst subarray3 = arr.slice(0, 2);\nconsole.log(subarray3); // [1, 2]\n```\n\n5. concat() \n\nconcat() is a method that returns a new array that consists of the elements in the original array, followed by the elements of one or more additional arrays or values. It does not modify the original array.\n\nHere are some of the examples:\n\n```{.js}\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst merged = arr1.concat(arr2);\nconsole.log(merged); // [1, 2, 3, 4, 5, 6]\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\nconst arr3 = [7, 8, 9];\nconst merged = arr1.concat(arr2, arr3, 10, 11, 12);\nconsole.log(merged); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n```\n\n> the main difference between the concat() and push() methods is that concat() returns a new array, while push() modifies the original array and returns the new length of the array.\n\n\n6. indexOf() and lastIndexOf()\n\nThe indexOf() method searches for an element from the start of the array, and returns the first index at which the element can be found. If the element is not found, it returns -1.\n\nHere is an example of how to use the indexOf() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet index = array.indexOf(5);\nconsole.log(index); // Output: 4\n```\n\nThe lastIndexOf() method, on the other hand, searches for an element from the end of the array, and returns the last index at which the element can be found. If the element is not found, it returns -1.\n\nHere is an example of how to use the lastIndexOf() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet index = array.lastIndexOf(5);\nconsole.log(index); // Output: 4\n```\nBoth the indexOf and lastIndexOf methods accept a second argument, which specifies the index at which the search should start. For example: \n\n```{.js}\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet index = array.indexOf(5, 3);\nconsole.log(index); // Output: 4\nindex = array.lastIndexOf(5, 6);\nconsole.log(index); // Output: 4\n```\n\n7. find() and findIndex()\n\nThe find() and findIndex() methods in JavaScript are used to search for an element in an array that satisfies a given condition.\n\nThe find() method returns the first element in the array that satisfies the condition, or undefined if no such element is found.\n\nHere is an example of how to use the find() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet element = array.find(function(value) {\n  return value > 5;\n});\nconsole.log(element); // Output: 6\n```\n\nThe findIndex() method, on the other hand, returns the index of the first element in the array that satisfies the condition, or -1 if no such element is found.\n\nHere is an example of how to use the findIndex() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet index = array.findIndex(function(value) {\n  return value > 5;\n});\nconsole.log(index); // Output: 5\n```\n\nBoth the find() and findIndex() methods accept a callback function as an argument, which is called for each element in the array. The callback function should return a boolean value indicating whether the element satisfies the condition.\n\nYou can also use the find() and findIndex() methods with arrow functions, like this:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9];\nlet element = array.find(value => value > 5);\nconsole.log(element); // Output: 6\nlet index = array.findIndex(value => value > 5);\nconsole.log(index); // Output: 5\n```\n\n8. join()\n\nThe join() method in JavaScript is a method of the Array object that allows you to join all the elements of an array into a single string.\n\nYou can use the join() method by calling it on an array, and passing a string as an argument. The string will be used as a separator between the elements of the array in the resulting string. If you omit the separator argument, the elements will be separated by a comma.\n\nHere is an example of how to use the join() method:\n```{.js}\nlet array = ['I', 'love', 'JavaScript'];\nlet string = array.join(', ');\nconsole.log(string); // Output: \"I, love, JavaScript\"\n```\nYou can also use the join() method with an empty string as a separator, like this:\n\n```{.js}\nlet array = ['I', 'love', 'Js'];\nlet string = array.join('');\nconsole.log(string); // Output: \"IloveJs\"\nExample 2. Joining an array of objects with a semicolon\nlet array = [{a: 1}, {b: 2}, {c: 3}];\nlet string = array.join('; ');\nconsole.log(string); // Output: \"[object Object]; [object Object]; [object Object]\"\n```\n> Keep in mind that the join() method only works with arrays. If you try to use it on a non-array value, you will get an error.\n\n9. split()\n\nThe split() method in JavaScript is a method of the String object that allows you to split a string into an array of substrings based on a specific separator.\n\nYou can use the split() method by calling it on a string, and passing a separator string as an argument. The split() method will split the string at each occurrence of the separator, and return an array of substrings. If you omit the separator argument, the split() method will split the string at each occurrence of a whitespace character (such as a space, tab, or newline).\n\nHere is an example of how to use the split() method:\n\n```{.js}\nlet string = \"apple, banana, orange\";\nlet array = string.split(', ');\nconsole.log(array); // Output: ['apple', 'banana', 'orange']\nExample 2. Use Regular Expression as a separator \nlet string = \"apple.banana.orange\";\nlet array = string.split(/\\./);\nconsole.log(array); // Output: ['apple', 'banana', 'orange']\n```\n\n\n\n## Iterating Over Arrays\n\nAlong with traditional ways i.e (for,while,do while) of iterating over array, we can leverage es6 array methods to make our life easier. \n\n1. forEach()\n\nforEach(): The forEach() method in JavaScript is a method of the Array object that allows you to iterate over the elements of an array and perform a specific action on each element. It does not return a new array, but instead operates on the original array.\n\nHere is an example of how to use the forEach() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5];\narray.forEach(function(value) {\n  console.log(value);\n});\n// 1\n// 2\n// 3\n// 4 \n// 5 \n```\n\n2. map() \n\nmap(): The map() method in JavaScript is a method of the Array object that allows you to transform the elements of an array into a new array. It returns a new array that is the result of calling a specific function on each element of the original array.\n\nHere is an example of how to use the map() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5];\nlet newArray = array.map(function(value) {\n  return value * 2;\n});\nconsole.log(newArray); // Output: [2, 4, 6, 8, 10]\nExample 2.  Using map() to extract the first letter of each element in an array\nlet array = ['apple', 'banana', 'orange'];\nlet newArray = array.map(function(value) {\n  return value[0];\n});\nconsole.log(newArray); // Output: ['a', 'b', 'o']\n```\n\n3. reduce()\n\nThe reduce() method in JavaScript is a method of the Array object that allows you to reduce the elements of an array to a single value. It applies a specific function to each element of the array, and returns a single value that is the result of the function.\n\nHere is an example of how to use the reduce() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5];\nlet sum = array.reduce(function(accumulator, value) {\n  return accumulator + value;\n}, 0);\nconsole.log(sum); // Output: 15\n// Example2. Find Maximum value in array \nlet array = [5, 2, 3, 1, 4];\nlet max = array.reduce(function(accumulator, value) {\n  return Math.max(accumulator, value);\n}, -Infinity);\nconsole.log(max); // Output: 5\n```\n\n4. filter()\n\nThe filter() method in JavaScript is a method of the Array object that allows you to filter the elements of an array based on a specific condition. It returns a new array that contains only the elements of the original array that satisfy the condition.\n\nHere is an example of how to use the filter() method:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5];\nlet newArray = array.filter(function(value) {\n  return value % 2 === 0;\n});\nconsole.log(newArray); // Output: [2, 4]\n```\n\n5. sort()\n\nThe sort() method in JavaScript is a method of the Array object that allows you to sort the elements of an array. It modifies the original array and returns it.\n\nHere is an example of how to use the sort() method:\n\n```{.js}\nlet array = [5, 2, 3, 1, 4];\narray.sort();\nconsole.log(array); //\n```\n\n## Spread Operator on Array\n\nThe spread operator (...) in JavaScript is a syntax that allows you to expand an iterable (such as an array or string) into individual elements.\n\nHere are some examples of how to use the spread operator:\n\n```{.js}\n// Example 1: Adding elements to an array\nlet array1 = [1, 2, 3];\nlet array2 = [4, 5, 6];\nlet combinedArray = [...array1, ...array2];\nconsole.log(combinedArray); // Output: [1, 2, 3, 4, 5, 6]\n// Example 2: Passing elements of an array as arguments to a function\nlet array = [1, 2, 3];\nlet max = Math.max(...array);\nconsole.log(max); // Output: 3\n// Example 3: Copying an array\nlet array1 = [1, 2, 3];\nlet array2 = [...array1];\nconsole.log(array2); // Output: [1, 2, 3]\n```\n\n## Destructuring Arrays \n\nDestructuring in JavaScript is a syntax that allows you to unpack values from arrays, or properties from objects, into distinct variables.\n\nHere are some examples of how to use destructuring with an array:\n\n```{.js}\nlet array = [1, 2, 3, 4, 5];\nlet [a, b, c] = array;\nconsole.log(a); // Output: 1\nconsole.log(b); // Output: 2\nconsole.log(c); // Output: 3\nYou can also use destructuring with the rest operator (...) to capture the remaining elements of the array. For example:\n```\n```{.js}\nlet array = [1, 2, 3, 4, 5];\nlet [a, b, ...rest] = array;\nconsole.log(a); // Output: 1\nconsole.log(b); // Output: 2\nconsole.log(rest); // Output: [3, 4, 5]\n```\nYou can also use destructuring to assign default values to variables, like this:\n\n```{.js}\nlet array = [1];\nlet [a, b = 2] = array;\nconsole.log(a); // Output: 1\nconsole.log(b); // Output: 2\n```\n\n> I have found spread and destructuring super useful as it prevents from long nasty chaining \n\n## Set \n\nA Set in JavaScript is a collection of unique values. It is similar to an array, but the values in a Set are not indexed, and the values must be unique.\n\nYou can create a Set by calling the Set constructor and passing an iterable (such as an array) as an argument, like this:\n\n```{.js}\nlet set = new Set([1, 2, 3, 4, 5]);\n```\n\nYou can also create an empty Set by calling the Set constructor without any arguments, like this:\n\n```{.js}\nlet set = new Set();\nYou can add values to a Set using the add() method, like this:\nset.add(1);\nset.add(2);\nset.add(3);\n```\n\nYou can remove values from a Set using the delete() method, like this:\n\n```{.js}\nset.delete(2);\n```\n\nYou can check if a Set contains a specific value using the has() method, like this:\n\n```{.js}\nset.has(2); // Output: false\nset.has(3); // Output: true\n```\n\nYou can iterate over the values in a Set using a for...of loop, like this:\n\n```{.js}\nfor (let value of set) {\n  console.log(value);\n}\n```\n\nYou can also use the size property to get the number of values in a Set, like this:\n\n```{.js}\nconsole.log(set.size); // Output: 2\n``` "},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"wrap","code-link":false,"code-line-numbers":false,"code-tools":{"source":false,"toggle":true,"caption":"See code"},"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"toc-depth":3,"number-sections":false,"html-math-method":"katex","reference-location":"margin","output-file":"array.html"},"language":{"code-summary":"Show the code"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.313","theme":{"light":"cosmo","dark":"darkly"},"toc-location":"right","code-copy":"hover","smooth-scroll":true,"anchor-sections":true,"fig-cap-location":"margin","footnotes-hover":true,"citations-hover":true},"extensions":{"book":{"multiFile":true}}}}}