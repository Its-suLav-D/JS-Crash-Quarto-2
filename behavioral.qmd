---
title: Behavioral Design Pattern 

---

# Algorithm Abstraction 

Algorithm abstraction refers to the practice of breaking down a complex algorithm into smaller, more manageable parts that can be easily reused and recombined to create new solutions. This process of simplification allows developers to focus on specific components of the algorithm, making it easier to understand, modify and maintain. Additionally, it makes it possible to use the individual components to create new variations or solutions to different problems, making the development process more efficient and flexible.


# Strategy Pattern 

The strategy design pattern is a behavioral design pattern that allows an algorithm's behavior to be selected at runtime. It defines a family of algorithms, encapsulates each one, and makes them interchangeable. This allows the algorithm to be selected and changed dynamically, depending on the situation or context.

In the strategy pattern, a class called the "context" holds a reference to a strategy object. The context class defines a common interface for the strategy objects, and the client code that uses the context class can work with any strategy object through this common interface.

## Strategy Pattern in Simple Terms

A strategy design pattern is like having a toolbox with different tools for different jobs. Imagine you need to build a house, and you have a hammer, a screwdriver, a saw, and a drill. Each tool is good for a specific job, like the hammer is good for hitting nails, the screwdriver is good for turning screws, the saw is good for cutting wood, and the drill is good for making holes.

So, if you need to build a house, you might use the hammer to put nails in the wood, the saw to cut the wood to the right size, the screwdriver to put the screws in and the drill to make holes for the pipes.

This is similar to how a computer program can use different ways of doing things depending on what it needs to do. Just like how you choose the right tool for the job, the program can choose the right strategy for the task.


## Components of the Strategy Pattern

The strategy pattern consists of several components that work together to allow an algorithm's behavior to be selected and changed dynamically:

1.  The strategy interface defines a common interface for all the strategy objects. This interface defines the methods that the strategy objects must implement.

2.  The concrete strategy classes implement the strategy interface and define specific algorithms or behaviors. These classes are interchangeable and can be selected and changed at runtime.

3.  The context class holds a reference to a strategy object and defines a common interface for the client code to interact with the strategy objects. The context class delegates the task to the strategy object it holds.

4.  The client code is the code that uses the context class and the strategy objects. The client code can work with any strategy object through the common interface defined by the context class, without needing to know the details of the concrete strategy classes.

5.  The strategy factory creates the strategy objects and assigns them to the context class. This factory can create multiple strategy objects and allows the client code to switch between them.

Overall, the strategy pattern allows for the separation of concerns, making the code more flexible, maintainable, and reusable.

## Example 

```{.js}
// Define the strategy interface
class Strategy {
    execute() {
        throw new Error("This method must be implemented");
    }
}

// Define concrete strategy classes
class ConcreteStrategyA extends Strategy {
    execute() {
        console.log("Executing strategy A");
    }
}

class ConcreteStrategyB extends Strategy {
    execute() {
        console.log("Executing strategy B");
    }
}

class ConcreteStrategyC extends Strategy {
    execute() {
        console.log("Executing strategy C");
    }
}

// Define the context class
class Context {
    constructor(strategy) {
        this.strategy = strategy;
    }

    setStrategy(strategy) {
        this.strategy = strategy;
    }

    executeStrategy() {
        this.strategy.execute();
    }
}

// Client code
const context = new Context(new ConcreteStrategyA());
context.executeStrategy(); // Output: "Executing strategy A"

context.setStrategy(new ConcreteStrategyB());
context.executeStrategy(); // Output: "Executing strategy B"

context.setStrategy(new ConcreteStrategyC());
context.executeStrategy(); // Output: "Executing strategy C"


```

## A Real-World Example of the Strategy Pattern

A real-world example of the strategy pattern might be an e-commerce website that allows customers to choose different shipping options at checkout. The website might have several shipping options, such as standard shipping, express shipping, and overnight shipping. Each shipping option has different costs, delivery times, and requirements.



```{.js}
// Define the strategy interface
class ShippingStrategy {
    calculateCost() {
        throw new Error("This method must be implemented");
    }

    deliveryTime() {
        throw new Error("This method must be implemented");
    }

    getDescription() {
        throw new Error("This method must be implemented");
    }
}

// Define concrete strategy classes
class StandardShipping extends ShippingStrategy {
    calculateCost() {
        return 5;
    }

    deliveryTime() {
        return "5-7 business days";
    }

    getDescription() {
        return "Standard Shipping";
    }
}

class ExpressShipping extends ShippingStrategy {
    calculateCost() {
        return 10;
    }

    deliveryTime() {
        return "2-3 business days";
    }

    getDescription() {
        return "Express Shipping";
    }
}

class OvernightShipping extends ShippingStrategy {
    calculateCost() {
        return 20;
    }

    deliveryTime() {
        return "Next business day";
    }

    getDescription() {
        return "Overnight Shipping";
    }
}

// Define the context class
class Order {
    constructor(shippingStrategy) {
        this.shippingStrategy = shippingStrategy;
        this.items = [];
    }

    setShippingStrategy(shippingStrategy) {
        this.shippingStrategy = shippingStrategy;
    }

    addItem(item) {
        this.items.push(item);
    }

    calculateTotalCost() {
        let cost = 0;
        for (let item of this.items) {
            cost += item.price;
        }
        return cost + this.shippingStrategy.calculateCost();
    }

    getShippingDescription() {
        return this.shippingStrategy.getDescription();
    }

    getDeliveryTime() {
        return this.shippingStrategy.deliveryTime();
    }
}

// Client code
const order = new Order(new StandardShipping());
console.log("Shipping Description: ", order.getShippingDescription());
console.log("Delivery Time: ", order.getDeliveryTime());
console.log("Total Cost: ", order.calculateTotalCost());

order.setShippingStrategy(new ExpressShipping());
console.log("Shipping Description: ", order.getShippingDescription());
console.log("Delivery Time: ", order.getDeliveryTime());
console.log("Total Cost: ", order.calculateTotalCost());

order.setShippingStrategy(new OvernightShipping());
console.log("Shipping Description: ", order.getShippingDescription());
console.log("Delivery Time: ", order.getDeliveryTime());
console.log("Total Cost: ", order.calculateTotalCost());

```


## Another Example of the Strategy Pattern

```{.js}

let OutputFormat = Object.freeze({
  markdown: 0,
  html: 1
});

class ListStrategy
{
  start(buffer) {}
  end(buffer) {}
  addListItem(buffer, item) {}
}

class MarkdownListStrategy extends ListStrategy
{
  addListItem(buffer, item) {
    buffer.push(` * ${item}`);
  }
}

class HtmlListStrategy extends ListStrategy
{
  start(buffer) {
    buffer.push('<ul>');
  }

  end(buffer)
  {
    buffer.push('</ul>');
  }

  addListItem(buffer, item) {
    buffer.push(`  <li>${item}</li>`)
  }
}

class TextProcessor
{
  constructor(outputFormat)
  {
    this.buffer = [];
    this.setOutputFormat(outputFormat);
  }

  setOutputFormat(format)
  {
    switch (format)
    {
      case OutputFormat.markdown:
        this.listStrategy = new MarkdownListStrategy();
        break;
      case OutputFormat.html:
        this.listStrategy = new HtmlListStrategy();
        break;
    }
  }

  appendList(items)
  {
    this.listStrategy.start(this.buffer);
    for (let item of items)
      this.listStrategy.addListItem(this.buffer, item);
    this.listStrategy.end(this.buffer);
  }

  clear()
  {
    this.buffer = [];
  }

  toString()
  {
    return this.buffer.join('\n');
  }
}

let tp = new TextProcessor();
tp.setOutputFormat(OutputFormat.markdown);
tp.appendList(['foo', 'bar', 'baz']);
console.log(tp.toString());

tp.clear();
tp.setOutputFormat(OutputFormat.html);
tp.appendList(['alpha', 'beta', 'gamma']);
console.log(tp.toString());

```


```{.js} 
class FlyingStrategy {
    draw() { /* code to draw the bird */ }
    advance() { /* code to make the bird advance */ }
}

class StandardFlying extends FlyingStrategy {
    draw() { /* code to draw a standard bird */ }
    advance() { /* code to make a standard bird advance */ }
}

class FloaterFlying extends FlyingStrategy {
    draw() { /* code to draw a floater bird */ }
    advance() { /* code to make a floater bird advance */ }
}

class CrazyFlying extends FlyingStrategy {
    draw() { /* code to draw a crazy bird */ }
    advance() { /* code to make a crazy bird advance */ }
}

class SinkerFlying extends FlyingStrategy {
    draw() { /* code to draw a sinker bird */ }
    advance() { /* code to make a sinker bird advance */ }
}

class Bird {
    constructor(radius = 1.0, points = 0) {
        this.dead = false;
        this.radius = radius;
        this.points = points;
        this.flyingStrategy = null;
    }

    setFlyingStrategy(strategy) {
        this.flyingStrategy = strategy;
    }

    get isDead() {
        return this.dead;
    }

    get position() {
        return this.pt;
    }

    get velocity() {
        return this.v;
    }

    get radius() {
        return this.radius;
    }

    get points() {
        return this.points;
    }

    get isOutOfBounds() {
        return (this.pt.x < -this.radius || this.pt.x >= dimensions.x + this.radius ||
                this.pt.y < -this.radius || this.pt.y >= dimensions.y + this.radius);
    }

    kill() {
        this.dead = true;
    }

    draw() {
        this.flyingStrategy.draw();
    }

    advance() {
        this.flyingStrategy.advance();
    }
}

class Standard extends Bird {
    constructor(radius = 25.0, speed = 5.0, points = 10) {
        super(radius, points);
        this.setFlyingStrategy(new StandardFlying());
        // other initialization code here
    }
}

class Floater extends Bird {
    constructor(radius = 30.0, speed = 5.0, points = 15) {
        super(radius, points);
        this.setFlyingStrategy(new FloaterFlying());
        // other initialization code here
    }
}

class Crazy extends Bird {
    constructor(radius = 30.0, speed = 4.5, points = 30) {
        super(radius, points);
        this.setFlyingStrategy(new CrazyFlying());
        // other initialization code here
    }
}

class Sinker extends Bird {
    constructor(radius = 30.0, speed = 4.5, points = 20) {
        super(radius, points);
        this.setFlyingStrategy(new SinkerFlying());
        // other initialization code here
    }
}

```

## Appropriate Scenario to Use the Strategy Pattern

The strategy pattern should be used when you have a set of related algorithms or behaviors that are interchangeable, and you want to be able to select and change the behavior at runtime. Some common scenarios where the strategy pattern is useful include:

1. You have a class that needs to perform one of several related algorithms, and you want to encapsulate the algorithms as objects to make the class more flexible and maintainable.

2. You want to be able to add new algorithms or behaviors to a system without modifying the existing code.

3. You want to be able to switch between different algorithms or behaviors at runtime, depending on the situation or context.

4. You want to encapsulate a class that uses a large number of conditional statements and make it more readable and maintainable

5. You have a algorithm that has multiple variations and you want to encapsulate each variation and make it interchangeable with other variations.

In general, the strategy pattern is a powerful tool for creating flexible, reusable, and maintainable code, and it can help to simplify complex systems by breaking them down into smaller, more manageable parts.



# Template Method Design Pattern 

The template method pattern is a behavioral design pattern that defines the skeleton of an algorithm in a method, called the template method, and allows subclasses to fill in the details. It defines a general way to execute a series of steps, but allows subclasses to provide specific implementations for some or all of the steps.

The template method pattern is often used when you have a series of steps that must be executed in a specific order, but some of the steps may vary depending on the situation or context. By using the template method pattern, you can define the overall structure of the algorithm in a base class, and then let subclasses fill in the details.

## Template Method in Simple Term

The template method pattern is like a recipe for making something. Imagine you want to make a cake, and you have a recipe that tells you the steps to make it. The recipe is like a template, it tells you the order of the steps, but not all the details of how to do each step.

For example, the recipe might say "Mix the ingredients together", but it doesn't tell you exactly how to mix them. You can use a spoon or a mixer, or you can mix them by hand. The recipe just tells you the general way to do it, but you can choose the specific details.

This is similar to how computer programs can use a template method to do a series of steps in a specific order, but some of the steps might be different depending on the situation. Just like how you can choose the specific details of how to mix the ingredients in a recipe, the program can choose the specific details of how to do each step.


## Template Method Example

```{.js}

class AbstractClass {
    templateMethod() {
        this.step1();
        this.step2();
        this.step3();
    }

    step1() {
        console.log("step1 (AbstractClass)");
    }

    step2() {
        console.log("step2 (AbstractClass)");
    }

    step3() {
        console.log("step3 (AbstractClass)");
    }
}

class ConcreteClass extends AbstractClass {
    step2() {
        console.log("step2 (ConcreteClass)");
    }
}

// Client code
const concreteClass = new ConcreteClass();
concreteClass.templateMethod();
/* Output:
step1 (AbstractClass)
step2 (ConcreteClass)
step3 (AbstractClass)
*/

```

## Real World Example of the Template Method Pattern

A real-world example of the template method pattern in JavaScript might be a web application that allows users to create custom reports. The application might have a base class that defines a template method for creating a report, which includes several common steps such as querying the database, formatting the data, and generating the final report.

```{.js}
class ReportTemplate {
    generateReport(reportData) {
        this.fetchData(reportData);
        this.formatData();
        this.generateOutput();
    }

    fetchData(reportData) {
        console.log("Fetching data from database (ReportTemplate)");
    }

    formatData() {
        console.log("Formatting data (ReportTemplate)");
    }

    generateOutput() {
        console.log("Generating final report (ReportTemplate)");
    }
}

class SalesReport extends ReportTemplate {
    fetchData(reportData) {
        console.log("Fetching sales data from database (SalesReport)");
    }
}

class InventoryReport extends ReportTemplate {
    fetchData(reportData) {
        console.log("Fetching inventory data from database (InventoryReport)");
    }
}

// Client code
const salesReport = new SalesReport();
salesReport.generateReport();
// Output:
// Fetching sales data from database (SalesReport)
// Formatting data (ReportTemplate)
// Generating final report (ReportTemplate)

const inventoryReport = new InventoryReport();
inventoryReport.generateReport();
// Output:
// Fetching inventory data from database (InventoryReport)
// Formatting data (ReportTemplate)
// Generating final report (ReportTemplate)

```

Another common scenario where the template method pattern is used is in building a financial application. For example, an application that manages investment portfolios. The application might have a base class that defines a template method for calculating the return on investment (ROI) of a portfolio, which includes several common steps such as fetching the portfolio data, calculating the returns and generating the final report.

```{.js}
class ROICalculator {
    calculateROI(portfolio) {
        this.fetchData(portfolio);
        this.calculateReturns();
        this.generateReport();
    }

    fetchData(portfolio) {
        // Fetch data from the portfolio
    }

    calculateReturns() {
        // Calculate returns on the portfolio
    }

    generateReport() {
        // Generate final report
    }
}

class StockPortfolio extends ROICalculator {
    fetchData(portfolio) {
        // Fetch stock data for the portfolio
    }
}

class RealEstatePortfolio extends ROICalculator {
    fetchData(portfolio) {
        // Fetch real estate data for the portfolio
    }
}

```

Last Example:

```{.js}
class Game {
  constructor(numberOfPlayers)
  {
    this.numberOfPlayers = numberOfPlayers;
    this.currentPlayer = 0;
  }

  run() {
    this.start();
    while (!this.haveWinner) {
      this.takeTurn();
    }
    console.log(`Player ${this.winningPlayer} wins.`);
  }

  start(){}
  get haveWinner(){}
  takeTurn(){}
  get winningPlayer(){}
}

class Chess extends Game
{
  constructor()
  {
    super(2);
    this.maxTurns = 10;
    this.turn = 1;
  }

  start()
  {
    console.log(
      `Starting a game of chess with ${this.numberOfPlayers} players.`
    );
  }

  get haveWinner()
  {
    return this.turn === this.maxTurns;
  }

  takeTurn() {
    console.log(
      `Turn ${this.turn++} taken by player ${this.currentPlayer}.`
    );
    this.currentPlayer = (this.currentPlayer + 1) % this.numberOfPlayers;
  }

  get winningPlayer()
  {
    return this.currentPlayer;
  }
}

let chess = new Chess();
chess.run();

``` 

## Applicability

The template method pattern is an appropriate solution when you have an algorithm with a fixed structure that needs to be executed in a specific order, but one or more of the steps might vary depending on the situation or context. Some common scenarios where the template method pattern is used include:

1. You have a process that needs to be executed in a specific order, but some of the steps might vary depending on the situation or context. For example, a financial application that calculates the return on investment (ROI) of a portfolio may need to fetch data, calculate returns and generate a report, but the data fetching process may vary depending on the type of portfolio.

2. You want to allow subclasses to provide specific implementations for one or more of the steps of the algorithm, while still ensuring that the overall structure of the algorithm remains the same.

3. You want to encapsulate a complex algorithm in a single method and make it reusable across different classes and situations.

4. You have a framework that needs to be customized for different use cases, but the overall structure of the framework should remain the same.

5. You want to be able to add new functionality to a system without modifying existing code.

In general, the template method pattern is a powerful tool for creating flexible, reusable, and maintainable code, and it can help to simplify complex systems by breaking them down into smaller, more manageable parts.



# Message Passing Design

The Message Passing Design Pattern is a software design pattern in which objects communicate with each other by sending and receiving messages. The message passing mechanism allows objects to send and receive data, triggers events, or request actions without the need for tight coupling or direct knowledge of the recipient's implementation. This allows for loose coupling between objects and promotes modularity, maintainability, and scalability in software systems.

## Mediator 

The Mediator Design Pattern is a behavioral design pattern that provides a centralized communication channel for objects to interact with each other in a decoupled way. In other words, objects don't communicate directly with each other, but through a mediator object., which acts as an intermediary. This can lead to more flexible and maintainable design by reducing the number of relationships between objects and promoting loose coupling.

For instance: Imaine that you have a group of friends who want to play a game together. But instead of each person talking to each other directly, you want to have a leader who helps everyone communicate and play the game together. This leader is like a helper who makes sure that everyone is on the same page and that everyone is having fun. This is the same concept as the mediator design pattern.

So, when one of your friends wants to tell the others about something, they tell the leader instead of telling each other directly. The leader then tells the rest of the friends about the message. This way, everyone can play the game together smoothly and on one gets left out. 

In javaScript, this pattern can be implemented using an object that acts as a mediator, and that contains methods for registering and unregistering objects, as well as methods for sending and receiving messages. 

```{.js}
class User {
    constructor(name)
    {
        this.name = name;
        this.chatroom = null;
    }

    sendMessage(recipient, message, mediator)
    {
        mediator.sendMessage(this, recipient, message);
    }
}

class ChatMediator()
{
    constructor()
    {
        this.users = {};
    }

    register(user)
    {
        this.users[user.name] = user;
    }

    send(sender, recipient, message)
    {
    if (this.users.includes(sender) && this.users.includes(recipient)) {
      console.log(`${sender.name} sent message "${message}" to ${recipient.name}`);
    } else {
      console.log(`Error: either sender or recipient is not registered`);
    }
    }
}

const chatMediator = new ChatMediator();
const userA = new User("User A");
const userB = new User("User B");

chatMediator.register(userA);
chatMediator.register(userB);

userA.sendMessage(userB, "Hello!", chatMediator);
userB.sendMessage(userA, "Hi there!", chatMediator);

```

### Example 2 - Mediator 

```{.js}
class Airplane {
  constructor(name) {
    this.name = name;
  }

  sendLocation(location, mediator) {
    mediator.sendLocation(this, location);
  }
}

class FlightControlCenter {
  constructor() {
    this.airplanes = [];
  }

  register(airplane) {
    this.airplanes.push(airplane);
  }

  sendLocation(airplane, location) {
    console.log(`${airplane.name} reported location: ${location}`);
  }
}

const flightControlCenter = new FlightControlCenter();
const airplaneA = new Airplane("Airplane A");
const airplaneB = new Airplane("Airplane B");

flightControlCenter.register(airplaneA);
flightControlCenter.register(airplaneB);

airplaneA.sendLocation("37.788022, -122.399797", flightControlCenter);
airplaneB.sendLocation("51.509865, -0.118092", flightControlCenter);

// Output:
// Airplane A reported location: 37.788022, -122.399797
// Airplane B reported location: 51.509865,

```

### Example 3 - Mediator 

```{.js}
class Participant()
{
    constructor(name){
        this.name = name;
    }


    joinConference(mediator) {
        mediator.register(this);
        console.log(`${this.name} joined the conference`);
    }

    leaveConference(mediator) {
        mediator.unregister(this);
        console.log(`${this.name} left the conference`);
    }

    receiveMessage(message, from) {
        console.log(`${this.name} received message "${message}" from ${from.name}`);
    }
}

class VideoConferencingSystem {
  constructor() {
    this.participants = [];
  }

  register(participant) {
    this.participants.push(participant);
  }

  unregister(participant) {
    this.participants = this.participants.filter(p => p !== participant);
  }

  sendMessage(message, from) {
    this.participants.forEach(participant => {
      if (participant !== from) {
        participant.receiveMessage(message, from);
      }
    });
  }
}

const videoConferencingSystem = new VideoConferencingSystem();
const participantA = new Participant("Participant A");
const participantB = new Participant("Participant B");
const participantC = new Participant("Participant C");

participantA.joinConference(videoConferencingSystem);
participantB.joinConference(videoConferencingSystem);
participantC.joinConference(videoConferencingSystem);

participantA.sendMessage("Hello everyone!", videoConferencingSystem);
participantB.sendMessage("Hi!", videoConferencingSystem);
participantC.sendMessage("Greetings!", videoConferencingSystem);

participantC.leaveConference(videoConferencingSystem);

participantA.sendMessage("Bye!", videoConferencingSystem);
participantB.sendMessage("Goodbye!", videoConferencingSystem);


```
## Chain of Responsibility 

The Chain of Responsibility pattern is a design pattern where a request is passed through a chain of objects until one of them handles it. The objects in the chain are called "handlers".

The Chain of Responsibility pattern is useful when you want to decouple the sender of a request from its receiver. It also allows you to add new handlers to the chain without changing the existing code.

> Okay, let's pretend you are playing a game of passing a ball to your friends. The ball starts with you, then you pass it to your friend, who then passes it to another friend, and so on, until one of your friends catches the ball.

> This is like the Chain of Responsibility pattern. The ball is like a request, and each of your friends is like a handler. The ball is passed from one friend to another until someone catches it and handles it.

> So, in this pattern, the request is passed along a chain of objects, and each object gets a chance to handle the request. If an object can't handle it, it passes the request to the next object in the chain, until it is handled.


### Example 1 - Chain of Responsibility 

```{.js}

class Request {
  constructor(amount) {
    this.amount = amount;
  }
}

class Payment {
  setNext(payment) {
    this.next = payment;
  }

  handle(request) {
    if (this.canHandle(request)) {
      console.log(`${this.constructor.name} handled request of ${request.amount}`);
    } else if (this.next) {
      this.next.handle(request);
    } else {
      console.log("Request not handled");
    }
  }
}

class PayPal extends Payment {
  canHandle(request) {
    return request.amount < 100;
  }
}

class Bank extends Payment {
  canHandle(request) {
    return request.amount >= 100 && request.amount < 1000;
  }
}

class WesternUnion extends Payment {
  canHandle(request) {
    return request.amount >= 1000;
  }
}

const paypal = new PayPal();
const bank = new Bank();
const westernUnion = new WesternUnion();

paypal.setNext(bank);
bank.setNext(westernUnion);

const request1 = new Request(50);
paypal.handle(request1); // PayPal handled request of 50

const request2 = new Request(150);
paypal.handle(request2); // Bank handled request of 150

const request3 = new Request(2000);
paypal.handle(request3); // WesternUnion handled request of 2000

```

### Example 2 - Chain of Responsibility 

```{.js}

class Request {
  constructor(type) {
    this.type = type;
  }
}

class Approver {
  setNext(approver) {
    this.next = approver;
  }

  handle(request) {
    if (this.canHandle(request)) {
      console.log(`${this.constructor.name} handled request of type: ${request.type}`);
    } else if (this.next) {
      this.next.handle(request);
    } else {
      console.log("Request not handled");
    }
  }
}

class Manager extends Approver {
  canHandle(request) {
    return request.type === "leave";
  }
}

class Director extends Approver {
  canHandle(request) {
    return request.type === "salary increase";
  }
}

const manager = new Manager();
const director = new Director();

manager.setNext(director);

const leaveRequest = new Request("leave");
manager.handle(leaveRequest); // Manager handled request of type: leave

const salaryIncreaseRequest = new Request("salary increase");
manager.handle(salaryIncreaseRequest); // Director handled request of type: salary increase

const otherRequest = new Request("other");
manager.handle(otherRequest); // Request not handled


```

## Observer Pattern

The Observer pattern is a design pattern where an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any changes to its state.

A real-world example of the Observer pattern is a weather station. The weather station (subject) has a list of weather subscribers (observers). When the temperature, humidity or pressure changes, the weather station updates its measurements and notifies all its subscribers of the change. Each subscriber (e.g. a weather app, a TV channel) updates its display with the new information.

Another example could be a stock market update system where a stock market data provider (subject) maintains a list of stock market subscribers (observers) such as stock market traders, brokers, and investors. When the stock market changes, the data provider updates its information and notifies all its subscribers of the changes. Each subscriber updates their stock portfolio and trading strategies based on the new information.


```{.js}

class Subject {
  constructor() {
    this.observers = [];
  }

  subscribe(observer) {
    this.observers.push(observer);
  }

  unsubscribe(observer) {
    this.observers = this.observers.filter(obs => obs !== observer);
  }

  notify(data) {
    this.observers.forEach(observer => observer.update(data));
  }
}

class Observer {
  constructor(name) {
    this.name = name;
  }

  update(data) {
    console.log(`${this.name} received data: ${data}`);
  }
}

const subject = new Subject();

const observer1 = new Observer("Observer 1");
const observer2 = new Observer("Observer 2");
const observer3 = new Observer("Observer 3");

subject.subscribe(observer1);
subject.subscribe(observer2);
subject.subscribe(observer3);

subject.notify("Hello World");
// Observer 1 received data: Hello World
// Observer 2 received data: Hello World
// Observer 3 received data: Hello World

subject.unsubscribe(observer2);
subject.notify("Hello Again");
// Observer 1 received data: Hello Again
// Observer 3 received data: Hello Again

```

### Example 2 - Observer Pattern

```{.js}
class WeatherStation {
  constructor() {
    this.temperature = 0;
    this.humidity = 0;
    this.pressure = 0;
    this.observers = [];
  }

  subscribe(observer) {
    this.observers.push(observer);
  }

  unsubscribe(observer) {
    this.observers = this.observers.filter(obs => obs !== observer);
  }

  notify() {
    this.observers.forEach(observer => {
      observer.update(this.temperature, this.humidity, this.pressure);
    });
  }

  setMeasurements(temperature, humidity, pressure) {
    this.temperature = temperature;
    this.humidity = humidity;
    this.pressure = pressure;
    this.notify();
  }
}

class WeatherApp {
  constructor(name) {
    this.name = name;
  }

  update(temperature, humidity, pressure) {
    console.log(`${this.name} received update:`);
    console.log(`Temperature: ${temperature}`);
    console.log(`Humidity: ${humidity}`);
    console.log(`Pressure: ${pressure}`);
  }
}

const weatherStation = new WeatherStation();
const weatherApp1 = new WeatherApp("Weather App 1");
const weatherApp2 = new WeatherApp("Weather App 2");

weatherStation.subscribe(weatherApp1);
weatherStation.subscribe(weatherApp2);

weatherStation.setMeasurements(20, 0.8, 1013);
// Weather App 1 received update:
// Temperature: 20
// Humidity: 0.8
// Pressure: 1013
// Weather App 2 received update:
// Temperature: 20
// Humidity: 0.8
// Pressure: 1013

weatherStation.unsubscribe(weatherApp1);

weatherStation.setMeasurements(22, 0.7, 1015);
// Weather App 2 received update:
// Temperature: 22
// Humidity: 0.7
// Pressure: 1015


```

### Example 3 - Observer Pattern

```{.js}
class StockMarketDataProvider {
  constructor() {
    this.stockPrices = {};
    this.observers = [];
  }

  subscribe(observer) {
    this.observers.push(observer);
  }

  unsubscribe(observer) {
    this.observers = this.observers.filter(obs => obs !== observer);
  }

  notify() {
    this.observers.forEach(observer => {
      observer.update(this.stockPrices);
    });
  }

  updateStockPrices(stockPrices) {
    this.stockPrices = stockPrices;
    this.notify();
  }
}

class StockTrader {
  constructor(name) {
    this.name = name;
  }

  update(stockPrices) {
    console.log(`${this.name} received update:`);
    console.log(stockPrices);
  }
}

const stockMarketDataProvider = new StockMarketDataProvider();
const stockTrader1 = new StockTrader("Stock Trader 1");
const stockTrader2 = new StockTrader("Stock Trader 2");

stockMarketDataProvider.subscribe(stockTrader1);
stockMarketDataProvider.subscribe(stockTrader2);

stockMarketDataProvider.updateStockPrices({
  "AAPL": 132.12,
  "GOOG": 1231.33,
  "AMZN": 3221.51
});
// Stock Trader 1 received update:
// {
//   "AAPL": 132.12,
//   "GOOG": 1231.33,
//   "AMZN": 3221.51
// }
// Stock Trader 2 received update:
// {
//   "AAPL": 132.12,

```
## Visitor Pattern

The Visitor pattern is a behavioral design pattern that separates an algorithm from an object structure it operates on. It allows adding new behaviors to existing objects, without changing the objects themselves.

The Visitor pattern defines a new operation to an existing object structure by defining a new class, called the visitor. The visitor class contains the algorithm to be executed and operates on the elements of the object structure, without changing the classes of the elements.

An example of the Visitor pattern in real life is a tax inspector visiting different companies. The tax inspector doesn't change the companies, but inspects them to calculate the tax they owe.


```{.js}
class Item {
  constructor(price) {
    this.price = price;
  }

  accept(visitor) {
    visitor.visit(this);
  }
}

class Book extends Item {
  constructor(price, isbn) {
    super(price);
    this.isbn = isbn;
  }
}

class DVD extends Item {
  constructor(price, length) {
    super(price);
    this.length = length;
  }
}

class TaxVisitor {
  visit(item) {
    if (item instanceof Book) {
      item.price = item.price * 1.05;
    } else if (item instanceof DVD) {
      item.price = item.price * 1.1;
    }
  }
}

const book = new Book(10, 123456);
const dvd = new DVD(20, 120);

const taxVisitor = new TaxVisitor();

book.accept(taxVisitor);
dvd.accept(taxVisitor);

console.log(book.price); // 10.5
console.log(dvd.price); // 22


```

Another real-world example of the Visitor pattern in JavaScript could be a travel agency website. The website allows customers to book various travel packages such as flight, hotel, and rental car.


```{.js}

class TravelPackage {
  accept(visitor) {
    visitor.visit(this);
  }
}

class Flight extends TravelPackage {
  constructor(price, departure, arrival) {
    super();
    this.price = price;
    this.departure = departure;
    this.arrival = arrival;
  }
}

class Hotel extends TravelPackage {
  constructor(price, name, rating) {
    super();
    this.price = price;
    this.name = name;
    this.rating = rating;
  }
}

class RentalCar extends TravelPackage {
  constructor(price, make, model) {
    super();
    this.price = price;
    this.make = make;
    this.model = model;
  }
}

class TotalCostVisitor {
  visit(travelPackage) {
    if (travelPackage instanceof Flight) {
      this.totalCost += travelPackage.price;
    } else if (travelPackage instanceof Hotel) {
      this.totalCost += travelPackage.price;
    } else if (travelPackage instanceof RentalCar) {
      this.totalCost += travelPackage.price;
    }
  }
}

const flight = new Flight(100, "New York", "London");
const hotel = new Hotel(150, "Grand Hotel", 4);
const car = new RentalCar(50, "Toyota", "Camry");

const totalCostVisitor = new TotalCostVisitor();
totalCostVisitor.totalCost = 0;

flight.accept(totalCostVisitor);
hotel.accept(totalCostVisitor);
car.accept(totalCostVisitor);

console.log(totalCostVisitor.totalCost); // 300


```